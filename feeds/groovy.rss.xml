<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Code Adept: Posts tagged 'groovy'</title>
  <description>Code Adept: Posts tagged 'groovy'</description>
  <link>http://blog.code-adept.com/tags/groovy.html</link>
  <lastBuildDate>Mon, 21 Jan 2008 05:00:00 UT</lastBuildDate>
  <pubDate>Mon, 21 Jan 2008 05:00:00 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Grails Goodness</title>
   <link>http://blog.code-adept.com/blog/2008/01/21/grails-goodness/?utm_source=groovy&amp;utm_medium=RSS</link>
   <guid>urn:http-blog-code-adept-com:-blog-2008-01-21-grails-goodness</guid>
   <pubDate>Mon, 21 Jan 2008 05:00:00 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I’m a huge fan of Grails, and after hearing a couple of talks on it at CodeMash last week I decided to check in on it’s progress. I had first caught wind of Grails last winter when I purchased the book &lt;a href="http://www.apress.com/book/view/1590597583"&gt;The Definitive Guide to Grails&lt;/a&gt;. I had been attempting to learn Ruby on Rails, and was quite unimpressed. I’m a big fan of the whole “Convention over configuration” way of thinking, but for some reason Rails just never did it for me. Unfortunately the Grails project was undergoing so many API changes as it was working towards the 1.0 release, that it basically rendered the sample application in the book unusable. Through much digging through the documentation and the APIs I was able to struggle through most of the book and knew that this framework had great potential. So now Grails is approaching 1.0 very soon and it’s time to re-familiarize myself with this wonderful platform.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Earlier this week I discovered a new article on IBM’s DeveloperWorks site titled &lt;a href="http://www.ibm.com/developerworks/java/library/j-grails01158/index.html?S_TACT=105AGX45&amp;amp;S_CMP=LPJAVA"&gt;Mastering Grails: Build your first Grails Application&lt;/a&gt; by Scott Davis. This article is very much a basic introduction to Grails. It takes the reader through creating the application and generating a simple domain class and controller. I love how in less than 100 lines of code, we’re able to have a complete CRUD application. If you use scaffolding, you can do it in just 15. Just a taste, definitely leaving the reader wanting more. Hopefully the next article will go in depth much more. Thankfully the code actually works as is and I didn’t have to do any digging to find out how to make it work. Until Chris Judd and company finish their Grails book Practical Grails Projects, I guess I’m stuck wading through the tutorials that may or may not work anymore depending on how long ago they were written.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Groovy, Grails, and RIAs...Oh My!</title>
   <link>http://blog.code-adept.com/blog/2008/01/14/groovy-grails-and-rias-oh-my/?utm_source=groovy&amp;utm_medium=RSS</link>
   <guid>urn:http-blog-code-adept-com:-blog-2008-01-14-groovy-grails-and-rias-oh-my</guid>
   <pubDate>Mon, 14 Jan 2008 05:01:00 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;This past week I was fortunate enough to attend CodeMash v2.0.0.8 in Sandusky, Ohio. This conference is unlike anything I’ve ever been to, somewhere in the neighborhood of 350 Java programmers, .NET fan-boys and Ruby zealots all under one roof, and even having a little fun together.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;I started out the day on Thursday with a helping of Groovy. Andrew Glover, one of the co-authors of &lt;em&gt;Groovy in Action&lt;/em&gt; talked about Groovy and reignited my passion for this wonderful scripting language. For those of you who haven’t looked at Groovy yet, you owe it to yourself to take a look at it. Groovy is a “Java”-like scripting language that has some similarities with other dynamic languages like Python and Ruby. Groovy is a dynamically typed language, unlike its Java counterpart, has no checked exceptions, and also has support for things such as closures. The really powerful thing about Groovy is its ability to run in the same JVM as your current Java applications, have access to all of the classes available to Java, and all of your Java applications can also access any libraries you have written in Groovy. This makes for a very easy adoption and integration into existing Java applications, or even quick prototyping that could eventually (if necessary) be replaced by Java code. Don’t be surprised if you see more and more Groovy seeping into Java applications with its low cost of adoption.&lt;/p&gt;

&lt;p&gt;The other real exciting session that I attended on Thursday was the Grails presentation given by Chris Judd, who is co-authoring a book called Practical Grails Applications. I was excited to see this framework actually approaching its 1.0 version in the very near future. I had looked at it earlier last year, but it was undergoing such rapid changes to its API that the book I purchased was rendered obsolete by the time I read it. Hopefully Chris and company have a very successful title and I’ll be able to actually build a working application. Grails is rather interesting in that it is similar to Rails in the fact that it follows the “Convention over configuration” theme, but after that most similarities stop. Grails leverages the Groovy language as its main development language, and leverages popular Java frameworks such as Spring and Hibernate to much of the heavy lifting. Even though the main contributor to Grails is a staunch anti-Maven guy (http://graemerocher.blogspot.com/2006/09/vote-to-stop-maven-infesting-spring.html), I’m still pretty excited about this framework and can’t wait to see it grow and prosper in the next year.&lt;/p&gt;

&lt;p&gt;Friday I got to hear James Ward, a Flex evangelist from Adobe, give a presentation on migrating Web 1.0 applications to RIAs. As some of you may know BJ Allmon and I are writing a book on Flex and how to do Agile programming using Flex. This presentation was especially helpful in the fact that James pretty much validated the whole book for us in this one presentation. His set of steps for refactoring Web 1.0 applications to Flex practically mirrored our table of contents that I had written just a couple of weeks before attending this conference.&lt;/p&gt;

&lt;p&gt;I had a wonderful time at this conference. I finally got to meet Bruce, who was the one who recruited me to Pillar, and BJ who will be helping me write possibly the best Flex book ever. I also got to meet some other very bright people out there in the technology world and pick their brains about some of the bleeding edge topics that interest me. I really hope that Pillar keeps sponsoring this conference and sends more and more of us each year to experience this.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>