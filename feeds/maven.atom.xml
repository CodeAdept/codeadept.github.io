<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Code Adept: Posts tagged 'maven'</title>
 <link rel="self" href="http://blog.code-adept.com/feeds/maven.atom.xml" />
 <link href="http://blog.code-adept.com/tags/maven.html" />
 <id>urn:http-blog-code-adept-com:-tags-maven-html</id>
 <updated>2008-01-16T05:00:01Z</updated>
 <entry>
  <title type="text">Analyzing Dependencies With The Maven Site Plugin</title>
  <link rel="alternate" href="http://blog.code-adept.com/blog/2008/01/16/analyzing-dependencies-with-the-maven-site-plugin/?utm_source=maven&amp;utm_medium=Atom" />
  <id>urn:http-blog-code-adept-com:-blog-2008-01-16-analyzing-dependencies-with-the-maven-site-plugin</id>
  <published>2008-01-16T05:00:01Z</published>
  <updated>2008-01-16T05:00:01Z</updated>
  <author>
   <name>Jeremy Anderson</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Now as most people will tell you I’m kind of a geek when it comes to Maven. It’s really a nice tool and it makes dependency management in large projects almost a no brainer…almost. The story I’m about to share is true, only the names have been changed to protect the innocent…&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;A couple of weeks ago we were having some clashes in one of our applications due to an older version of log4j showing up on the classpath. So what could have been like finding a needle in a haystack was actually fairly simple to track down, if you only know where to look. Thankfully, some of my ranting and raving about Maven has rubbed off at this client. They took some of my suggestions as far as Maven-izing their new projects and have even seen the benefits of using the site plugin to generate project documentation. In this case, the site plugin is what ended up saving us. In the site documentation that is generated there are a couple of reports called, oddly enough, &lt;code&gt;Dependencies&lt;/code&gt; and &lt;code&gt;Dependency Convergence&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="dependency-convergence"&gt;Dependency Convergence&lt;/h2&gt;

&lt;p&gt;The Dependency Convergence report is especially nice when dealing with large multi-module projects. At this client it is normal for each project to contain anywhere from 3 – 7 modules and maintaining a pom.xml for each one can sometimes lead to versions getting out of sync between modules. This report analyzes all of the dependency versions that appear in all of the modules for the project, and compares them to the versions of the dependencies defined for this particular module.&lt;/p&gt;

&lt;p&gt;At the top of the report you’ll see the summary. In this specific report you’ll see that this module has quite a few mismatched versions being defined as dependencies.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/dependency-stats1.png" alt="Dependency Convergence Summary" /&gt;
 &lt;p class="caption"&gt;Dependency Convergence Summary&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;The rest of the report consists of an itemized list of every dependency that is defined in the module and this is where you can see what the discrepancies are, if any.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/dependency-convergence.png" alt="Dependency Convergence" /&gt;
 &lt;p class="caption"&gt;Dependency Convergence&lt;/p&gt;&lt;/div&gt;

&lt;h2 id="dependencies"&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;The Dependencies report is the one that actually saved us some serious investigation. We had just gone through and removed any explicit dependencies on log4j, since we were using commons-logging and Weblogic provides log4j for us. Somehow log4j kept showing up on the classpath, and it was an older version which had a method with a different signature than what was provided by Weblogic, so it was still causing problems. So along comes the dependency report to the rescue. The top of the report lists out what dependencies are defined and in what scope, followed by any transitive dependencies. A little further down the report is a section that actually gives a tree-view of your dependencies so you can see the hierarchy. Here is where we discovered that displaytag was the culprit.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/dependency-hierarchy.png" alt="Dependency Tree" /&gt;
 &lt;p class="caption"&gt;Dependency Tree&lt;/p&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Maven Multi-Module Quickstart</title>
  <link rel="alternate" href="http://blog.code-adept.com/blog/2008/01/14/maven-multi-module-quickstart/?utm_source=maven&amp;utm_medium=Atom" />
  <id>urn:http-blog-code-adept-com:-blog-2008-01-14-maven-multi-module-quickstart</id>
  <published>2008-01-14T05:00:00Z</published>
  <updated>2008-01-14T05:00:00Z</updated>
  <author>
   <name>Jeremy Anderson</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Recently I&amp;rsquo;ve had lots of questions about how to create multi-module projects, so when I discovered this technique, I thought I&amp;rsquo;d write this up. This technique exploits a little known feature of the &lt;code&gt;archetype:create&lt;/code&gt; plugin, and the Maven site archetype to kickstart your project. Creating a multi-module project has many benefits, one of them being the ability to build every artifact in a project with one simple &lt;code&gt;mvn compile&lt;/code&gt; command. Another benefit is that if you are using either the maven &lt;code&gt;eclipse:eclipse&lt;/code&gt; plugin or the &lt;code&gt;idea:idea&lt;/code&gt; plugin, you can enter this command at the root of the project and it will generate all of the project files for all of the contained modules.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;First generate the top level project using the &lt;code&gt;maven-archetype-site-simple&lt;/code&gt; archetype using the following command,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn archetype:create
 -DgroupId=[Java:the project's group id]
 -DartifactId=[Java:the project's artifact id]
 -DarchetypeArtifactId=maven-archetype-site-simple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will generate a Maven project with the following directory structure.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/maven-archetype-site-simple.png" alt="Maven Site Simple Folder" title="folder structure" /&gt;
 &lt;p class="caption"&gt;Maven Site Simple Folder&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;The project that is generated is the minimum project setup to generate site documentation. The &lt;code&gt;index.apt&lt;/code&gt; file is the main index page for the site, and is written in the Almost Plain Text format, which is a wiki like format. You can also generate a more complete site project using the &lt;code&gt;maven-archetype-site&lt;/code&gt; archetype like this,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn archetype:create
 -DgroupId=[Java:the project's group id]
 -DartifactId=[Java:the project's artifact id]
 -DarchetypeArtifactId=maven-archetype-site&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate the following project structure.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/maven-archetype-site.png" alt="Maven Site Folder Structure" title="site folder structure" /&gt;
 &lt;p class="caption"&gt;Maven Site Folder Structure&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;After you have generated the site project, edit the &lt;code&gt;pom.xml&lt;/code&gt; created from the site archetype plugin. Make sure the the packaging type is set to &lt;code&gt;pom&lt;/code&gt; like the following.&lt;/p&gt;

&lt;div class="brush: xml"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;modelversion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelversion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupid&amp;gt;&lt;/span&gt;com.pillartechnology&lt;span class="nt"&gt;&amp;lt;/groupid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactid&amp;gt;&lt;/span&gt;sampleProject&lt;span class="nt"&gt;&amp;lt;/artifactid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class="nt"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;By setting the packaging type to &lt;code&gt;pom&lt;/code&gt;, any projects you generate from the root of the project directory will insert itself into the project by creating an entry into the modules section of the &lt;code&gt;pom.xml&lt;/code&gt; for the site. In the root directory of your project that you created above, type in the following command,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn archetype:create
 -DgroupId=[Java:the module's group id]
 -DartifactId=[Java:the module's artifact id]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now edit the &lt;code&gt;pom.xml&lt;/code&gt; for the main project, you should see an entry towards the bottom of the file like the following.&lt;/p&gt;

&lt;div class="brush: xml"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
&lt;span class="nt"&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;sampleModule&lt;span class="nt"&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/html&gt;</content></entry></feed>